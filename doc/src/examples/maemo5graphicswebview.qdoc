/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights.  These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example maemo5/graphicswebview
    \title Maemo 5 QGraphicsWebView Example

    The Maemo 5 QGraphicsWebView example shows how to use QAbstractKineticScroller
    within a QGraphicsView based application

    \tableofcontents

    \image maemo5-graphicswebview-example.png Screenshot of the Browser example

    \part ViewportItem

    First, a container item, the ViewportItem, which contains the
    to-be-scrolled content item needs to be implemented: It derives from
    QAbstractKineticScroller and QGraphicsWidget.  Because it is only a
    container, some \c Flags need to be set to convert it to something
    resembling a scroll area first:

    \snippet maemo5/graphicswebview/mainwindow.cpp 0

    QGraphicsItem::ItemClipsToShape to get only the mouse events within the
    ViewportItem.
    QGraphicsItem::ItemClipsChildrenToShape to disable childrens painting
    outside the ViewportItem's rect.
    QGraphicsItem::ItemHasNoContents and Qt::WA_OpaquePaintEvent to speed up
    painting.

    Additionally \c setFilterChildEvents is used to install an event filter
    on all children of the viewport, so that all mouse events can be
    intercepted and used for kinetic scrolling.

    \snippet maemo5/graphicswebview/mainwindow.cpp 1

    The scrollable graphics widget is bound to the kinetic scroller by
    calling \c setWidget().  This new graphics widget will be reparented to
    the ViewportItem in order to get correct viewport like clipping.  If the
    widget is a \c WebView, additionally a connection to a slot resizing the
    widget to the full page size as soon as loading is finished is made.

    \snippet maemo5/graphicswebview/mainwindow.cpp 2

    The size of the viewport depends on the size of the content. If the
    content is smaller than the viewport, it need to be expanded to the
    viewport's size (otherwise the scene's background would show through).

    In order to get the kinetic scrolling to work, all pure virtual methods
    need to be implemented: \snippet maemo5/graphicswebview/mainwindow.cpp 3

    \c viewportSize() returns the size of the viewport. Please note that
    QAbstractKineticScroller works with integer coordinates only.

    \c maximumScrollPosition() returns the point, where normal scrolling
    ends (and overshoot would start).  The \c minimumScrollPosition is
    always assumed to be \c{(0,0)}.

    \c scrollPosition() returns the current position (excluding overshoot).

    \c setScrollPosition() actually moves the content within the viewport.
    This is also the place where overshooting is handled.
    \br
    \br

    To actually enable the kinetic scroller, it needs to receive mouse
    events.  These are coming from the \c sceneEventFilter() function:

    \snippet maemo5/graphicswebview/mainwindow.cpp 4

    \chapter Important Hint

    \snippet maemo5/graphicswebview/mainwindow.cpp 6

    To prevent the \c WebView to make ugly text selections while scrolling,
    all events of type of \c GraphicsSceneMouseMove need to be filtered out
    (The downside is that this example does not allow text selection at
    all).

    \part GraphicsView

    To make the webview look native, some things have to be configured in
    QGraphicsView:

    \snippet maemo5/graphicswebview/mainwindow.cpp 7

    Next up is creating a ViewportItem and adding it to the scene.

    The Maemo 5 window manager will automatically maximize windows on \c
    show(), so the ViewportItem needs to resize together with the
    QGraphicsView in \c resizeEvent():

    \snippet maemo5/graphicswebview/mainwindow.cpp 8

    \part Using the GraphicsView

    In order to call this example actaully a browser, the standard back and
    reload buttons, as well as an URL entry widget needs to be added:

    \snippet maemo5/graphicswebview/mainwindow.cpp 9

    \part MainWindow

    \snippet maemo5/graphicswebview/mainwindow.h 0

    \snippet maemo5/graphicswebview/mainwindow.cpp 10

*/
