/****************************************************************************
**
** Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights.  These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example maemo5/windowstates
    \title Maemo 5 Window States Example

    The Maemo 5 Window States example shows how to handle different states
    of top-level widgets with Qt on Maemo 5.

    Since Maemo 5 is touch-based, it does not have a mouse cursor. In order
    to indicate to the user that an application is busy, a special attribute
    needs to be set on a top-level widget, which causes the Maemo 5 window
    manager to display a "busy" indicator in the application's title bar.

    \snippet examples/maemo5/windowstates/examplewidget.h 1

    The \c{toggleBusy()} slot activates or deactivates the
    Qt::WA_Maemo5ShowProgressIndicator window attribute on the top-level example
    widget according to the \c checkState parameter. 

    \snippet examples/maemo5/windowstates/examplewidget.h 2

    To programmatically show an Exposee of all running applications on the device,
    an application can send a request via a D-Bus signal on the D-Bus session bus.
    The D-Bus signal must emit the function \c{"exit_app_view"} on the interface
    \c{"com.nokia.hildon_desktop"} on the root object path \c{"/"}.

    \snippet examples/maemo5/windowstates/examplewidget.h 0

    The Maemo 5 window manager shows all top-level widgets maximized by default.
    In order to show a top-level widget full-screen, call QWidget::showFullScreen().
    To exit full-screen, call QWidget::showNormal(). Whether a top-level widget is
    currently full screen can be queried by testing whether the
    QWidget::windowState() contains Qt::WindowFullScreen.

    When to exit full-screen mode is up to the application. The Maemo 5 image viewer
    exits full screen when the user clicks on the currently displayed image. Other
    applications show a semi-transparent button that, when clicked, cause them to
    exit full-screen mode. This example contains a class \c FullScreenExitButton in
    a separate single header file that can be copied and used in any project. This
    shows a semi-transparent full-screen exit button in the lower-right corner of
    your application.

    \snippet examples/maemo5/windowstates/examplewidget.h 3

    \c FullScreenExitButton can be instantiated on any top-level widget.
    Once the top-level widget enters full-screen, it becomes visible.
    If the top-level widget leaves full-screen mode, it automatically hides itself.
    When clicked by the user, it calls QWidget::showNormal() on its top-level widget.

    \snippet examples/maemo5/windowstates/examplewidget.h 4

    In order to set other window states that are not directly supported by Qt, X11
    can be used directly. These two headers are required to interact with X11.

    \snippet examples/maemo5/windowstates/examplewidget.h 5

    In this example snippet, the "Do not disturb" window state is set.
    This window state is documented to not show any notifications of low priority
    if the current widget is active.
    As an example, changing the device's volume with its volume keys will produce
    a notification when the state is off, but will change the volume without
    notification when the state is on.

    First, the \c _HILDON_DO_NOT_DISTURB X11 atom is retrieved from X11. If that
    fails, the application is not run in the Maemo 5 X11 environment.

    Depending on the check state of the QCheckBox, the X11 atom is either set or
    cleared via \c XChangeProperty and \c XDeleteProperty. QX11Info::display() returns
    the root display of the current Qt application. QWidget::winId() returns the
    native window id of the current X11 window. Note that the atom must be set on a
    top-level widget. If this widget is a child widget, use QWidget::window()
    to determine its top-level widget.
*/
