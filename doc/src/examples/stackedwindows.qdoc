/****************************************************************************
**
** Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights.  These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example maemo5/stackedwindows
    \title Maemo 5 Stacked Windows Example

    The Maemo Stacked Windows example shows how to create Maemo 5
    "Window Views" with Qt. Technically, Window Views are multiple top-level
    widgets that can be chained together with a special window
    attribute. The Maemo 5 window manager will show a sliding animation
    when switching between the top-level widgets, and the close button
    will turn into a back arrow to allow the user to go back to the last
    top-level widget.

    \image maemo5-stackedwindows-example.png Screenshot of the Stacked Windows example

    To inform the window manager that the top-level widgets belong to a
    Window View, all top-levels need to have the Qt::WA_Maemo5StackedWindow attribute
    set. The parent-child relationship between the top-level widgets determines
    the stacking order of the Window View.

    \snippet examples/maemo5/stackedwindows/main.cpp 0

    A new top-level push button is created, and the Qt::WA_Maemo5StackedWindow
    attribute is set to inform the Window Manager to treat this top-level
    button as part of a Window View.

    \snippet examples/maemo5/stackedwindows/main.cpp 1

    The second push button is created with the first button as its
    parent. Again, the Qt::WA_Maemo5StackedWindow attribute is set. Setting
    a parent widget in Qt implicitly means that the widget is a child widget,
    so it is necessary to set the Qt::Window window flag to ensure the widget
    becomes a top-level widget.

    \snippet examples/maemo5/stackedwindows/main.cpp 2

    Our third and last widget is a label. It gets the second push button
    as parent widget and the Qt::Window window flag is set to ensure that it is
    a top-level widget. Again, the Qt::WA_Maemo5StackedWindow attribute
    is set.

    \snippet examples/maemo5/stackedwindows/main.cpp 3

    Finally, the signals are connected. When the first push button is
    clicked, the second push button is shown. A click on the second
    push button will show the label.

    Qt will handle the hiding of the top-level widgets when the user presses
    the back arrow.
*/
